import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from tqdm import tqdm  # Import tqdm for progress tracking
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

ds = pd.read_csv("../dataset/sales.csv", parse_dates=['release_date'])
ds = ds.sample(n=1000)

df = pd.DataFrame(ds)
df = df.sort_values(by="release_date")

# Convert release_date to datetime format
df["release_date"] = pd.to_datetime(df["release_date"])

# Extract date, month, year, and quarter from release_date
df["date"] = df["release_date"].dt.day
df["month"] = df["release_date"].dt.month
df["year"] = df["release_date"].dt.year
df["quarter"] = df["release_date"].dt.quarter

# Remove the release_date column
df.drop("release_date", axis=1, inplace=True)

# Encode specific columns using Label Encoder
label_encoder = LabelEncoder()
df["season"] = label_encoder.fit_transform(df["season"])
df["category"] = label_encoder.fit_transform(df["category"])
df["color"] = label_encoder.fit_transform(df["color"])
df["fabric"] = label_encoder.fit_transform(df["fabric"])

# Function to frame the time series data
def frame_series(df, train_window=2, forecast_horizon=1):
    X, y = [], []   
    for i in tqdm(range(df.shape[0]), desc="Framing time series"):
        sales = df.iloc[i, -12:].values  # Extract the sales data for 12 weeks    
        additional_features = df[['external_code', 'retail', 'season','category','color','fabric'
                                 ,'year','quarter','month','date']].iloc[i].values
        for j in range(len(sales) - train_window - forecast_horizon + 1):
            features = list(sales[j : j + train_window]) + list(additional_features)
            target = sales[j + train_window : j + train_window + forecast_horizon]
            X.append(features)
            y.append(target)

    return X, y

X, y = frame_series(df)
# Combine X and y using numpy hstack
combined_data = np.hstack((X, y))

# Assuming X and y are your NumPy arrays containing features and target values, respectively
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create and train the Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X, y)

y_pred = rf_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error (MAE):", mae)