import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from tqdm import tqdm  # Import tqdm for progress tracking
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv("C:/Users/Sameera/OneDrive - York St John University/MYPROJECT/dataset/sales.csv", parse_dates=['release_date'])
df = df.sample(n=1000)
trend_data = pd.read_csv("C:/Users/Sameera/OneDrive - York St John University/MYPROJECT/dataset/vis2_gtrends_data.csv", index_col=[0], parse_dates=True)

df = pd.DataFrame(df)
df = df.sort_values(by="release_date")
trend_data = trend_data.sort_values(by="date")

# Encode specific columns using Label Encoder
label_encoder = LabelEncoder()
df["season"] = label_encoder.fit_transform(df["season"])
df["category"] = label_encoder.fit_transform(df["category"])
df["color"] = label_encoder.fit_transform(df["color"])
df["fabric"] = label_encoder.fit_transform(df["fabric"])

# Function to frame the time series data
def frame_series(df, train_window=2, forecast_horizon=1):
    X, y = [], []   
    for (_, row) in tqdm(df.iterrows(), total=len(df)):
        sales = row.iloc[-12:].values  # Extract the sales data for 12 weeks    
        category, fabric, color, season, store, release_date = (
            row['category'],
            row['fabric'],
            row['color'],
            row['season'],
            row['retail'],
            row['release_date']
        )        
        
        year, quarter, month, week = (
            release_date.year,
            release_date.quarter,
            release_date.month,
            release_date.week
        )        
        
         # Get the original category name from the encoded value
        original_category = label_encoder.inverse_transform([category])[0]
        # Similarly, you can get the original fabric, color, and season names
        original_fabric = label_encoder.inverse_transform([fabric])[0]
        original_color = label_encoder.inverse_transform([color])[0]
        original_season = label_encoder.inverse_transform([season])[0]
        
        offsetWeeks = 24
        start_date = release_date - pd.DateOffset(weeks=offsetWeeks)
        cat_gtrend = trend_data.loc[start_date:release_date][original_category][-offsetWeeks:].values[:offsetWeeks]
        col_gtrend = trend_data.loc[start_date:release_date][original_color][-offsetWeeks:].values[:offsetWeeks]
        fab_gtrend = trend_data.loc[start_date:release_date][original_fabric][-offsetWeeks:].values[:offsetWeeks]
        
         # Edge cases with missing trends
        if len(cat_gtrend) < offsetWeeks:
            cat_gtrend = trend_data.loc[:start_date][original_category][-52:].values[
                : offsetWeeks
            ]
        if len(col_gtrend) < offsetWeeks:
            col_gtrend = trend_data.loc[:start_date][original_color][-52:].values[
                : offsetWeeks
            ]
        if len(fab_gtrend) < offsetWeeks:
            fab_gtrend = trend_data.loc[:start_date][original_fabric][-52:].values[
                : offsetWeeks
            ]
            
        cat_gtrend = (
            MinMaxScaler().fit_transform(cat_gtrend.reshape(-1, 1)).flatten()
        )
        col_gtrend = (
            MinMaxScaler().fit_transform(col_gtrend.reshape(-1, 1)).flatten()
        )
        fab_gtrend = (
            MinMaxScaler().fit_transform(fab_gtrend.reshape(-1, 1)).flatten()
        )

        
        for j in range(len(sales) - train_window - forecast_horizon + 1):
            features = list(sales[j : j + train_window]) 
            features.extend([year,quarter,month,week,category,fabric,color,season,store])
            features.extend(cat_gtrend)
            features.extend(col_gtrend)
            features.extend(fab_gtrend)
            target = sales[j + train_window : j + train_window + forecast_horizon]
            X.append(features)
            y.append(target)

    return X, y

X, y = frame_series(df)
# Combine X and y using numpy hstack
gh = pd.DataFrame(X)
print(gh.shape)

# Assuming X and y are your NumPy arrays containing features and target values, respectively
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create and train the Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X, y)

y_pred = rf_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error (MAE):", mae)
